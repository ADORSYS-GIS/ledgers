@startuml
actor PSU
entity TPP
entity XS2A
entity SPI
entity SPI
entity CMS
entity Online_banking
entity Core_banking
entity Keycloak
note right of CMS
For an Authorisation Call
CMS-PSU-API is used
end note
PSU->TPP: Initiate payment
activate TPP
activate PSU
TPP -> XS2A: REST Call Initiate payment\nPOST "/v1/payments/{payment-product}"
activate XS2A
XS2A->SPI: Java Call SPIinitiatePayment
activate SPI
|||
SPI-->XS2A: SpiSinglePaymentInitiationResponse
deactivate SPI
|||
XS2A-->TPP:Payment initiation response
deactivate XS2A
|||
TPP->XS2A: REST Call Initiate authorisation implicitly \nPOST"/v1/{payment-service }/{payment-product}/\n{paymentId}/authorisations"
activate XS2A
note left
         in case of Multilevel SCA
         the authorisation steps
         should be repeated for other PSU
end note
|||
XS2A-->TPP:Start authorisation response\n"link_SCARedirect "
deactivate XS2A
TPP-->PSU: Feedback to the customer\nAuthorise the transaction
deactivate TPP
|||
group Authorisation process
PSU->Online_banking: PSU re-direct to an authorisation webpage of the ASPSP
activate Online_banking
|||
Online_banking-->PSU: Display Login webpage
deactivate Online_banking
PSU->Online_banking: Pass user Credentials (login/email and password)
activate Online_banking
|||
Online_banking->Keycloak: Perform user login (grant_type: password)
activate Keycloak
|||
Keycloak-->Online_banking: Login Token Response
deactivate Keycloak
Online_banking->CMS: REST Call GetPaymentByRedirectId\n"GET/psu-api/v1/payment/redirect/{redirect-id}"
activate CMS
CMS-->Online_banking: CmsPaymentResponse
deactivate CMS
Online_banking->Core_banking: Initiate Payment call using Login Token
activate Core_banking
Core_banking->Keycloak: validate Token
activate Keycloak
Keycloak-->Core_banking: OK/NOK
deactivate Keycloak
Core_banking-->Online_banking: Initiate Payment Response (Listing SCA Methods)
deactivate Core_banking
Online_banking-->PSU: Display webpage with payment initiation \nStart Authorisation button \nDisplay SCA Methods to select from
deactivate Online_banking
|||
PSU->Online_banking: Select method
activate Online_banking
Online_banking->CMS: REST Call GetPaymentByRedirectId\n"GET/psu-api/v1/payment/redirect/{redirect-id}"
activate CMS
CMS-->Online_banking: CmsPaymentResponse
deactivate CMS
Online_banking->Core_banking:Select Method Rest call
activate Core_banking
Core_banking->Keycloak: validate Token
activate Keycloak
Keycloak-->Core_banking: OK/NOK
deactivate Keycloak
Core_banking-->PSU: Send SCA data (TAN)
Core_banking-->Online_banking: SCAResponse
deactivate Core_banking
Online_banking-->CMS: Push UpdateAuthorisationStatus
Online_banking-->PSU: Display validate TAN webpage
deactivate Online_banking
|||
PSU->Online_banking: Validate TAN Request
activate Online_banking
Online_banking->CMS: REST Call GetPaymentByRedirectId\n"GET/psu-api/v1/payment/redirect/{redirect-id}"
activate CMS
CMS-->Online_banking: CmsPaymentResponse
deactivate CMS
Online_banking->Core_banking: Validate TAN and confirm Payment
activate Core_banking
Core_banking->Keycloak: validate Token
activate Keycloak
Keycloak-->Core_banking: OK/NOK
Core_banking->Keycloak: Exchange LoginToken for FullAccess Token
Keycloak-->Core_banking: FullAccess Token Response
deactivate Keycloak
Core_banking-->Online_banking: SCAResponse with confirming payment is executed/scheduled \nincluding fullAccessToken
deactivate Core_banking
Online_banking-->CMS: Push UpdatePaymentStatus
Online_banking-->CMS: Push Update ASPSP ConsentData containing FullAccess Token
Online_banking-->PSU: Display Return to TPP / Developer Portal webpage
deactivate Online_banking
end
PSU->TPP: Redirect back to TPP
deactivate PSU
activate TPP
|||
TPP->XS2A: REST Call get payment status\n"GET/v1/{payment-service}/{paymentId}/status"
activate XS2A
|||
XS2A->CMS: REST Call GetPaymentById
activate CMS
|||
CMS-->XS2A: Payment Object Response
deactivate CMS
|||
XS2A->SPI: Java Call SPI GetPaymentStatusByid
activate SPI
SPI->CMS: Get ASPSP ConsentData
activate CMS
CMS-->SPI: ASPSP ConsentData Response
deactivate CMS
|||
SPI->Core_banking: GetPaymentStatusById using Token stored in ASPSP ConsentData
activate Core_banking
|||
Core_banking->Keycloak: validate Token
activate Keycloak
Keycloak-->Core_banking: OK/NOK
deactivate Keycloak
|||
Core_banking-->SPI: Transaction Status Response
deactivate Core_banking
|||
SPI-->XS2A: Transaction Status Response
deactivate SPI
|||
XS2A->CMS: REST Call UpdateTransactionStatus
activate CMS
|||
CMS->XS2A: UpdateTransactionStatus Response
deactivate CMS
|||
XS2A-->TPP: Transaction Status Response
deactivate XS2A
|||
TPP->XS2A: REST Call Get Payment Request "GET/v1/\n{payment-service}/{paymentId}"
deactivate TPP
activate XS2A
XS2A->CMS: REST Call GetPaymentById
activate CMS
|||
CMS-->XS2A: Payment Object Response
deactivate CMS
|||
XS2A->SPI: Java Call SPIGetPaymentbyId
activate SPI
|||
SPI->CMS: Get ASPSP ConsentData
activate CMS
CMS-->SPI: ASPSP ConsentData Response
deactivate CMS
SPI->Core_banking: GetPaymentById using Token stored in ASPSP ConsentData
activate Core_banking
|||
Core_banking->Keycloak: validate Token
activate Keycloak
Keycloak-->Core_banking: OK/NOK
deactivate Keycloak
|||
Core_banking-->SPI: Payment Object Response
deactivate Core_banking
SPI-->XS2A: SpiSinglrPayment /\nSpiPeriodicPayment /\nSpiBulkPayment /\nSpiPaymentInfo
deactivate SPI
|||
XS2A->CMS: REST Call UpdatePayment
activate CMS
|||
CMS-->XS2A: UpdatePayment Response
deactivate CMS
|||
XS2A-->TPP: Get Payment Response
deactivate XS2A
activate TPP
|||
TPP->XS2A: REST Call Get Authorisation Sub-resources\n"GET/v1/{payment-service}/{payment-product}\n/{paymentId/authorisations}"
activate XS2A
|||
XS2A->CMS: GetAuthorisationsByPaymentId
activate CMS
|||
CMS-->XS2A: GetAuthorisationsByPaymentId Response
deactivate CMS
XS2A-->TPP: Authorisation Ids List
|||
TPP->XS2A: REST Call Get Authorisation\n"GET/v1/{payment-service}/{payment-product}/\n{paymentId/authorisations}/{authorisationId}"
XS2A->CMS: GetAuthorisationScaStatus
activate CMS
|||
CMS-->XS2A: GetAuthorisationScaStatus Response
deactivate CMS
XS2A-->TPP: Sca Status
deactivate XS2A
deactivate TPP
@enduml