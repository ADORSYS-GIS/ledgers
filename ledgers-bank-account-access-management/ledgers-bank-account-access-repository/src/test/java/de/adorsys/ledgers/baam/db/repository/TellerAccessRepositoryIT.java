package de.adorsys.ledgers.baam.db.repository;

import com.github.springtestdbunit.DbUnitTestExecutionListener;
import de.adorsys.ledgers.baam.db.domain.AccessStatus;
import de.adorsys.ledgers.baam.db.domain.TellerAccess;
import de.adorsys.ledgers.baam.db.test.BaamRepositoryApplication;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import org.springframework.test.context.transaction.TransactionalTestExecutionListener;

import java.util.Date;
import java.util.Optional;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(classes = BaamRepositoryApplication.class)
@ExtendWith(SpringExtension.class)
@TestExecutionListeners({DependencyInjectionTestExecutionListener.class,
        TransactionalTestExecutionListener.class,
        DbUnitTestExecutionListener.class})
class TellerAccessRepositoryTest {

    @Autowired
    private TellerAccessRepository tellerAccessRepository;

    private TellerAccess tellerAccess;

    @BeforeEach
    void setUp() {
        tellerAccess = new TellerAccess();
    }

    @Test
    void testTellerAccessCreationWithAutoGeneratedUUID() {
        // Create and set up a new TellerAccess entity without setting the UUID
        String tellerName = "John Doe";
        String tellerId = "TELLER123";
        AccessStatus status = AccessStatus.ACTIVE;
        double dailyLimit = 5000.0;
        Date createdDate = new Date();
        Date lastModifiedDate = new Date();

        // Set values using constructor, but UUID will be autogenerated
        TellerAccess newTellerAccess = new TellerAccess(null, tellerName, tellerId, status, dailyLimit, createdDate, lastModifiedDate, "TELLER_ACCESS");

        // Save to repository (persist)
        TellerAccess savedTellerAccess = tellerAccessRepository.save(newTellerAccess);

        // Check that a UUID was generated after saving
        assertNotNull(savedTellerAccess.getId());  // Assert that the UUID was generated
        assertEquals(tellerName, savedTellerAccess.getName());
        assertEquals(tellerId, savedTellerAccess.getTellerId());
        assertEquals(status, savedTellerAccess.getStatus());
        assertEquals(dailyLimit, savedTellerAccess.getDailyLimit());

        // Check dates, but avoid exact matches due to timing issues
        assertNotNull(savedTellerAccess.getCreatedDate());
        assertNotNull(savedTellerAccess.getLastModifiedDate());

        assertEquals("TELLER_ACCESS", savedTellerAccess.getAccessType());
    }


    @Test
    void testStatusUpdateInDatabase() {
        // Create and save an entity
        tellerAccess.setId(UUID.randomUUID());
        tellerAccess.setName("Jane Smith");
        tellerAccess.setTellerId("TELLER456");
        tellerAccess.setStatus(AccessStatus.ACTIVE);
        tellerAccess.setDailyLimit(1000.0);
        tellerAccess.setCreatedDate(new Date());
        tellerAccess.setLastModifiedDate(new Date());

        TellerAccess savedTellerAccess = tellerAccessRepository.save(tellerAccess);

        // Update status to SUSPENDED
        savedTellerAccess.setStatus(AccessStatus.SUSPENDED);
        TellerAccess updatedTellerAccess = tellerAccessRepository.save(savedTellerAccess);

        // Retrieve from DB and verify the status change
        Optional<TellerAccess> retrievedTellerAccess = tellerAccessRepository.findById(updatedTellerAccess.getId());
        assertTrue(retrievedTellerAccess.isPresent());
        assertEquals(AccessStatus.SUSPENDED, retrievedTellerAccess.get().getStatus());
    }

    @Test
    void testSetDailyLimitInDatabase() {
        // Create and save an entity
        tellerAccess.setId(UUID.randomUUID());
        tellerAccess.setName("Paul Walker");
        tellerAccess.setTellerId("TELLER789");
        tellerAccess.setStatus(AccessStatus.ACTIVE);
        tellerAccess.setDailyLimit(2000.0);
        tellerAccess.setCreatedDate(new Date());
        tellerAccess.setLastModifiedDate(new Date());

        TellerAccess savedTellerAccess = tellerAccessRepository.save(tellerAccess);

        // Update daily limit
        savedTellerAccess.setDailyLimit(3000.0);
        TellerAccess updatedTellerAccess = tellerAccessRepository.save(savedTellerAccess);

        // Retrieve from DB and verify the daily limit change
        Optional<TellerAccess> retrievedTellerAccess = tellerAccessRepository.findById(updatedTellerAccess.getId());
        assertTrue(retrievedTellerAccess.isPresent());
        assertEquals(3000.0, retrievedTellerAccess.get().getDailyLimit());
    }
}
